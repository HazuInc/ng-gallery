{"version":3,"file":"lazy.directive.js","sourceRoot":"","sources":["../inlined/directive/lazy.directive.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,UAAU,EACV,KAAK,EACL,MAAM,EACN,YAAY,EACZ,SAAS,EACV,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAc,OAAO,EAAE,EAAE,EAAE,MAAM,MAAM,CAAC;AAC/C,OAAO,EAAE,SAAS,EAA4B,MAAM,gBAAgB,CAAC;AAMrE;IAYE,uBAAoB,EAAc,EAAU,QAAmB;QAA/D,iBAYC;QAZmB,OAAE,GAAF,EAAE,CAAY;QAAU,aAAQ,GAAR,QAAQ,CAAW;QAL/D,iDAAiD;QACjD,eAAU,GAAG,IAAI,OAAO,EAAU,CAAC;QAEzB,aAAQ,GAAG,IAAI,YAAY,CAAU,KAAK,CAAC,CAAC;QAIpD,mGAAmG;QACnG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,UAAC,IAAI,IAAK,OAAA,EAAE,CAAC,IAAI,CAAC,EAAR,CAAQ,CAAC,CAAC;aAChD,SAAS,CAAC,UAAC,GAAG;YACb,IAAI,GAAG,EAAE;gBACP,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAI,CAAC,EAAE,CAAC,aAAa,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;gBAC7D,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;aACzB;iBAAM;gBACL,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC3B;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IArBmB,sBAAI,oCAAS;QADjC,eAAe;aACK,UAAc,SAAiB;YACjD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC3B,CAAC;;;OAAA;IAqBD,gCAAQ,GAAR,UAAS,SAAiB;QAA1B,iBAaC;QAZC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACzB,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC/C,GAAG,CAAC,GAAG,GAAG,SAAS,CAAC;QAEpB,GAAG,CAAC,MAAM,GAAG;YACX,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAClC,CAAC,CAAC;QAEF,GAAG,CAAC,OAAO,GAAG,UAAC,GAAQ;YACrB,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,GAAG,CAAC,CAAC;YAC9C,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3B,CAAC,CAAC;IACJ,CAAC;IApCmB;QAAnB,KAAK,CAAC,WAAW,CAAC;;;kDAElB;IAKS;QAAT,MAAM,EAAE;;mDAA6C;IAV3C,aAAa;QAHzB,SAAS,CAAC;YACT,QAAQ,EAAE,aAAa;SACxB,CAAC;yCAawB,UAAU,EAAoB,SAAS;OAZpD,aAAa,CAyCzB;IAAD,oBAAC;CAAA,AAzCD,IAyCC;SAzCY,aAAa","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  Renderer2\n} from '@angular/core';\n\nimport { Observable, Subject, of } from 'rxjs';\nimport { switchMap, tap, takeWhile, finalize } from 'rxjs/operators';\n\n\n@Directive({\n  selector: '[lazyImage]'\n})\nexport class LazyDirective {\n\n  // Image source\n  @Input('lazyImage') set lazyImage(imagePath: string) {\n    this.getImage(imagePath);\n  }\n\n  /** A subject to emit only last selected image */\n  lazyWorker = new Subject<string>();\n\n  @Output() lazyLoad = new EventEmitter<boolean>(false);\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n\n    // this.lazyTest.switchMap((done) => (done) ? Observable.of(done).delay(1000) : Observable.of(done)\n    this.lazyWorker.pipe(switchMap((done) => of(done)))\n      .subscribe((img) => {\n        if (img) {\n          this.renderer.setProperty(this.el.nativeElement, 'src', img);\n          this.lazyLoad.emit(true)\n        } else {\n          this.lazyLoad.emit(false);\n        }\n      });\n  }\n\n  getImage(imagePath: string) {\n    this.lazyWorker.next('');\n    const img = this.renderer.createElement('img');\n    img.src = imagePath;\n\n    img.onload = () => {\n      this.lazyWorker.next(imagePath);\n    };\n\n    img.onerror = (err: any) => {\n      console.error('[GalleryLazyDirective]:', err);\n      this.lazyWorker.next('');\n    };\n  }\n\n}\n\n"]}