{"version":3,"file":"gallery.directive.js","sourceRoot":"","sources":["../inlined/directive/gallery.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, ElementRef, Renderer2, Input, OnInit } from '@angular/core';\nimport { GalleryService } from '../service/gallery.service';\nimport { GalleryImage } from '../service/gallery.state';\nimport { isEqual, pluck } from '../utils/index';\n\nimport { from } from 'rxjs';\nimport { map, finalize } from 'rxjs/operators';\n\n@Directive({\n  selector: '[gallerize]'\n})\nexport class GalleryDirective implements OnInit {\n\n  // A flag to check if content has changed\n  content: string;\n  srcList: string[] = [];\n\n  @Input() gallerize: string;\n  @Input() subtree: string = '';\n  @Input() filter: Function;\n\n  constructor(public el: ElementRef, public renderer: Renderer2, public gallery: GalleryService) {\n  }\n\n  ngOnInit() {\n    let target = this.el.nativeElement;\n\n\n    var updateGallery = () => {\n\n      // skip if content is the same \n      if (!target || (this.content && this.content === target.innerText)) {\n        return;\n      }\n      else {\n        this.content = target.innerText;\n      }\n\n      const images: GalleryImage[] = [];\n      const classes = (this.gallerize) ? this.gallerize.split(' ').map((className) => '.' + className) : '';\n\n      // get all img elements from content\n      const imageElements = target.querySelectorAll(this.subtree + ` img${classes}`)\n\n      if (!imageElements || !imageElements.length) {\n        this.srcList = [];\n        return;\n      }\n\n      let srcs = Array.from(imageElements).map((elem: HTMLImageElement) => {\n        return elem.dataset && elem.dataset.originalImageUrl ? elem.dataset.originalImageUrl : elem.src\n      })\n      //let srcs = pluck(imageElements, 'src');\n      let isSame = isEqual(this.srcList, srcs);\n      this.srcList = srcs;\n      from(imageElements).pipe(map((img: HTMLImageElement, i) => {\n        // add click event to the images\n        let src = img.dataset && img.dataset.originalImageUrl ? img.dataset.originalImageUrl : img.src;\n        this.renderer.setStyle(img, 'cursor', 'pointer');\n        if (!this.filter || this.filter(img)) {\n          this.renderer.setProperty(img, 'onclick', () => {\n            if (this.srcList.indexOf(src) !== -1) {\n              this.gallery.set(i);\n            }\n\n          });\n        }\n\n        // create an image item\n        images.push({\n          src: src,\n          text: img.alt\n        });\n      }),\n        finalize(() => {\n          if (!isSame) {\n            this.gallery.load(images)\n          }\n        }))\n        .subscribe();\n    }\n    // create an observer instance\n    var observer = new MutationObserver(updateGallery);\n\n    var config = { subtree: true, childList: true }\n    observer.observe(target, config);\n    updateGallery();\n  }\n}\n"]}