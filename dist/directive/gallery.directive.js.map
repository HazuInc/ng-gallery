{"version":3,"sources":["../inlined/directive/gallery.directive.ts"],"names":[],"mappings":"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","file":"gallery.directive.js","sourceRoot":"","sourcesContent":["import { Directive, ElementRef, Renderer2, Input, OnInit } from '@angular/core';\nimport { GalleryService } from '../service/gallery.service';\nimport { GalleryImage } from '../service/gallery.state';\nimport { isEqual, pluck } from '../utils/index';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/finally';\n\n\nexport class GalleryDirective implements OnInit {\n\n  // A flag to check if content has changed\n  content: string;\n  srcList: string[] = [];\n\n   gallerize: string;\n   subtree: string = '';\n\n  constructor(public el: ElementRef, public renderer: Renderer2, public gallery: GalleryService) {\n  }\n\n  ngOnInit() {\n    let target = this.el.nativeElement;\n\n\n    var updateGallery = () => {\n\n      // skip if content is the same \n      if (!target || (this.content && this.content === target.innerText)) {\n        return;\n      }\n      else {\n        this.content = target.innerText;\n      }\n\n      const images: GalleryImage[] = [];\n      const classes = (this.gallerize) ? this.gallerize.split(' ').map((className) => '.' + className) : '';\n\n      // get all img elements from content\n      const imageElements = target.querySelectorAll(this.subtree + ` img${classes}`)\n\n      if (!imageElements || !imageElements.length) {\n        this.srcList = [];\n        return;\n      }\n\n      let srcs = pluck(imageElements, 'src');\n\n      // skip if urls same \n      if (isEqual(this.srcList, srcs)) {\n        return;\n      }\n\n      this.srcList = srcs;\n\n      Observable.from(imageElements).map((img: HTMLImageElement, i) => {\n        // add click event to the images\n        this.renderer.setStyle(img, 'cursor', 'pointer');\n        this.renderer.setProperty(img, 'onclick', () => {\n          if (this.srcList.indexOf(img.src) !== -1) {\n            this.gallery.set(i);\n          }\n\n        });\n\n        // create an image item\n        images.push({\n          src: img.src,\n          text: img.alt\n        });\n      })\n        .finally(() => this.gallery.load(images))\n        .subscribe();\n\n\n    }\n    // create an observer instance\n    var observer = new MutationObserver(updateGallery);\n\n    var config = { subtree: true, childList: true }\n    observer.observe(target, config);\n    updateGallery();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[gallerize]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: GalleryService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'gallerize': [{ type: Input },],\n'subtree': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}