{"version":3,"sources":["../../../src/component/gallery-modal/gallery-modal.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,uBAAA,EAAyB,SAAA,EAAW,YAAA,EAAc,KAAA,EAAiB,MAAO,eAAA,CAAgB;AACnG,OAAO,EAAE,UAAA,EAAY,KAAA,EAAO,OAAA,EAAS,KAAA,EAAO,OAAA,EAAQ,MAAO,qBAAA,CAAsB;AACjF,OAAO,EAAE,cAAA,EAAe,MAAO,+BAAA,CAAgC;AAG/D;IA8BE,+BAAmB,OAAuB;QAAvB,YAAO,GAAP,OAAO,CAAgB;QA5BzC,gBAAW,GAAG,IAAI,CAAC;IA6BpB,CAAC;IA1BD,uCAAuC;IAEvC,6CAAa,GAAb,UAAc,KAAoB;QAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAA,CAAC;YACzC,MAAM,CAAC;QACT,CAAC;QACD,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,MAAM,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YACtB,KAAK,EAAE;gBACL,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACpB,KAAK,CAAC;YACR,KAAK,EAAE;gBACL,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACpB,KAAK,CAAC;YACR,KAAK,EAAE;gBACL,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACpB,KAAK,CAAC;YACR,KAAK,EAAE;gBACL,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;gBACrB,KAAK,CAAC;YACR;gBACE,MAAM,CAAC;QACX,CAAC;IACH,CAAC;IAKD,2CAAW,GAAX;QACE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IA6BH,4BAAC;AAAD,CAhEA,AAgEC;;AA3BM,gCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,eAAe;gBACzB,WAAW,EAAE,gCAAgC;gBAC7C,SAAS,EAAE,CAAC,gCAAgC,CAAC;gBAC7C,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,UAAU,EAAE;oBACV,OAAO,CAAC,OAAO,EAAE;wBACf,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,GAAG,EAAG,SAAS,EAAE,qCAAqC,EAAC,CAAC,CAAC;wBACtF,UAAU,CAAC,WAAW,EAAE;4BACtB,KAAK,CAAC,EAAG,OAAO,EAAE,GAAG,EAAG,SAAS,EAAE,qCAAqC,EAAE,CAAC;4BAC3E,OAAO,CAAC,GAAG,CAAC;yBACb,CAAC;wBACF,UAAU,CAAC,WAAW,EAAE;4BACtB,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,EAAG,OAAO,EAAE,CAAC,EAAG,SAAS,EAAE,gCAAgC,EAAE,CAAC,CAAC;yBACnF,CAAC;qBACH,CAAC;iBAAC;aACN,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,oCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,cAAc,GAAG;CACvB,EAF6F,CAE7F,CAAC;AACK,oCAAc,GAA2C;IAChE,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACjC,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,cAAc,EAAE,CAAC,QAAQ,CAAC,EAAG,EAAE,EAAE;CAC/E,CAAC","file":"gallery-modal.component.js","sourceRoot":"","sourcesContent":["import { ChangeDetectionStrategy, Component, HostListener, Input, OnDestroy } from '@angular/core';\nimport { transition, state, trigger, style, animate } from '@angular/animations';\nimport { GalleryService } from '../../service/gallery.service';\n\n\nexport class GalleryModalComponent implements OnDestroy {\n\n   closeButton = true;\n  \n\n  /** Activate keyboard for navigation */\n  \n  keyboardInput(event: KeyboardEvent) {\n    if (!this.gallery.state.getValue().active){\n      return;\n    }\n    event.stopPropagation();\n    switch (event.keyCode) {\n      case 37:  // prev\n        this.gallery.prev();\n        break;\n      case 39:  // next\n        this.gallery.next();\n        break;\n      case 13:  // enter\n        this.gallery.next();\n        break;\n      case 27:  // esc\n        this.gallery.close();\n        break;\n      default:\n        return;\n    }\n  }\n\n  constructor(public gallery: GalleryService) {\n  }\n\n  ngOnDestroy() {\n    this.gallery.reset();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'gallery-modal',\n  templateUrl: './gallery-modal.component.html',\n  styleUrls: ['./gallery-modal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('popup', [\n      state('in', style({ opacity: 0.8 , transform: 'scale(0.2) translate3d(0, 100px, 0)'})),\n      transition('void => *', [\n        style({  opacity: 0.8 , transform: 'scale(0.2) translate3d(0, 100px, 0)' }),\n        animate(300)\n      ]),\n      transition('* => void', [\n        animate(300, style({  opacity: 1 , transform: 'scale(1)  translate3d(0, 0, 0)' }))\n      ])\n    ])]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: GalleryService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'closeButton': [{ type: Input },],\n'keyboardInput': [{ type: HostListener, args: ['body:keydown', ['$event'], ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}